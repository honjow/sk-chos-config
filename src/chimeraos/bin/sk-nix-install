#!/bin/bash

# action is install or uninstall
ACTION=$1

set -e

nix_bash_backup=/etc/bashrc.backup-before-nix
nix_bash_backup2=/etc/bash.bashrc.backup-before-nix
nix_zsh_backup=/etc/zsh/zshrc.backup-before-nix
nix_zsh_backup2=/etc/zshrc.backup-before-nix
nix_profile=/etc/profile.d/nix.sh
nix_profile_backup=/etc/profile.d/nix.sh.backup-before-nix

nix_path=/nix
mount_path=/frzr_root
nix_frzr_path=$mount_path/nix

function check_mount() {
    # check nix subvolume
    if [ ! -d "$nix_frzr_path" ]; then
        echo "nix subvolume not found, creating..."
        sudo btrfs subvolume create $nix_frzr_path
    else
        # check if subvolume exists
        if sudo btrfs subvolume show $nix_frzr_path; then
            echo "nix subvolume found"
        else
            echo "$nix_frzr_path exists but is not a Btrfs subvolume."
            sudo rm -rf $nix_frzr_path
            sudo btrfs subvolume create $nix_frzr_path
        fi
    fi

    # check fstab
    if grep -q $nix_path /etc/fstab; then
        echo "fstab entry found"
    else
        echo "fstab entry not found, adding..."
        echo "LABEL=frzr_root /nix       btrfs subvol=nix,rw,noatime,nodatacow,nofail 0 0" | sudo tee -a /etc/fstab
    fi

    # mount
    if mount | grep -q $nix_path; then
        echo "nix already mounted"
    else
        echo "nix not mounted, mounting..."
        sudo mount -a
    fi
}

function install_nix() {
    sudo systemctl stop nix-daemon.socket || true
    sudo systemctl stop nix-daemon.service || true

    check_mount

    if [ -f "$nix_bash_backup" ]; then
        sudo mv $nix_bash_backup /etc/bashrc
    fi

    if [ -f "$nix_bash_backup2" ]; then
        sudo mv $nix_bash_backup2 /etc/bash.bashrc
    fi

    if [ -f "$nix_zsh_backup" ]; then
        sudo mv $nix_zsh_backup /etc/zshrc
    fi

    if [ -f "$nix_zsh_backup2" ]; then
        sudo mv $nix_zsh_backup2 /etc/zshrc
    fi
    
    if [ -f "$nix_profile_backup" ]; then
        sudo mv /etc/profile.d/nix.sh.backup-before-nix /etc/profile.d/nix.sh
    fi

    curl -L https://mirrors.tuna.tsinghua.edu.cn/nix/latest/install | sudo sh -s -- --daemon --no-channel-add
    source /etc/profile.d/nix.sh

    sudo mkdir -p /etc/nix

    # add trusted user
    sudo echo "trusted-users = root $USER" | sudo tee /etc/nix/nix.conf && \
    echo 'substituters = https://mirrors.tuna.tsinghua.edu.cn/nix-channels/store https://cache.nixos.org/' | sudo tee -a /etc/nix/nix.conf
    sudo systemctl restart nix-daemon

    source /etc/profile.d/nix.sh
    sudo nix-channel --add https://mirrors.tuna.tsinghua.edu.cn/nix-channels/nixpkgs-unstable nixpkgs
    sudo nix-channel --update

    sudo systemctl enable nix-daemon.service
}

function uninstall_nix() {
    sudo systemctl disable --now nix-daemon.socket || true
    sudo systemctl disable --now nix-daemon.service || true

    sudo mv $nix_bash_backup /etc/bashrc || true
    sudo mv $nix_bash_backup2 /etc/bash.bashrc || true
    sudo mv $nix_zsh_backup /etc/zsh/zshrc || true
    sudo mv $nix_zsh_backup2 /etc/zshrc || true

    sudo rm -f $nix_profile_backup || true
    sudo rm -f /etc/profile.d/nix.sh || true
    sudo rm -rf /nix/*

}


# case statement to determine action
case "$ACTION" in
    install)
        install_nix
        ;;
    uninstall)
        uninstall_nix
        ;;
    *)
        echo "Usage: $0 {install|uninstall}"
        exit 1
esac