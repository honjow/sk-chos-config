#!/bin/bash

get_fbcon() {

	# Device specific configs
	DEVICENAME=$(cat /sys/devices/virtual/dmi/id/product_name)

	# OXP
	OXP_LIST="ONE XPLAYER:ONEXPLAYER 1 T08:ONEXPLAYER 1S A08:ONEXPLAYER 1S T08:ONEXPLAYER mini A07:ONEXPLAYER mini GA72:ONEXPLAYER mini GT72:ONEXPLAYER Mini Pro:ONEXPLAYER GUNDAM GA72:ONEXPLAYER 2 ARP23:ONEXPLAYER 2 PRO ARP23P:ONEXPLAYER 2 PRO ARP23P EVA-01:ONEXPLAYER F1"
	# AOKZOE
	AOK_LIST="AOKZOE A1 AR07:AOKZOE A1 Pro"
	# AYANEO AIR
	AIR_LIST="AIR:AIR Pro:AIR 1S"
	AYN_LIST="Loki Max:Loki Zero:Loki MiniPro"
	# Lenovo
	LENOVO_LIST="83E1"

	# AYANEO AYA
	AYA_LIST="NEXT:NEXT Pro:NEXT Advance:AYANEO NEXT:AYANEO NEXT Pro:AYANEO NEXT Advance:AYA NEO Fouder:AYA NEO 2021:AYANEO 2021:AYANEO 2021 Pro:AYANEO 2021 Pro:AYANEO 2021 Pro Retro Power:AYANEO 2:GEEK:AYANEO 2S:GEEK 1S"
	# GPD
	GPD_LIST="G1619-01:G1621-02:MicroPC:G1617-01"


	LEFT_LIST="${OXP_LIST}:${AIR_LIST}:${AOK_LIST}:${AYN_LIST}:${LENOVO_LIST}"
	RIGHT_LIST="${AYA_LIST}:${GPD_LIST}"

	if [[  ":${LEFT_LIST}:" =~ ":${DEVICENAME}:" ]]; then
		echo "fbcon=rotate:3"
	elif [[ ":${RIGHT_LIST}:" =~ ":${DEVICENAME}:" ]]; then
		echo "fbcon=rotate:1"
	else
		echo ""
	fi

}

# Check if the script is running with root or sudo privileges
if [ "$EUID" -ne 0 ]; then
    echo "This script must be run as root or with sudo."
    exit 1
fi

NEED_REBOOT=${1:-"0"}

echo "start frzr-unlock"
frzr-unlock


/usr/bin/sk-chos-boot-fix 2>/dev/null

service_status=$(systemctl is-enabled update_boot_config.service 2>/dev/null)
if [[ "$service_status" == "enabled" ]]; then
    echo "update_boot_config.service is enabled, disabling"
    sudo systemctl disable --now update_boot_config.service
fi

# swap uuid
swap_dev=$(awk '$2 == "partition" && $1 ~ "^/dev/[^z]" {print $1}' /proc/swaps)
if [[ -n "$swap_dev" ]]; then
  SWAP_PARTUUID=$(lsblk -no PARTUUID -f "$swap_dev")
fi
echo "SWAP_PARTUUID=$SWAP_PARTUUID"

# swap file
root_partuuid=$(lsblk -no PARTUUID $(mount | grep ' / ' | cut -d' ' -f1))

if [ -f "/frzr_root/swap/swapfile" ]; then
    RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r /frzr_root/swap/swapfile)
fi


if [ -d /tmp/frzr_root ]; then
  source ${MOUNT_PATH}/etc/sk-chos/sk-chos.conf
else
  source /etc/sk-chos/sk-chos.conf
fi

RESUME_CMD=""
if [[ -n "${SWAP_PARTUUID}" ]]; then
    echo "SWAP_PARTUUID 非空，添加到内核参数"
    RESUME_CMD="resume=PARTUUID=${SWAP_PARTUUID}"

    systemctl disable --now swapfile.service
    systemctl disable --now frzr_root-swap-swapfile.swap

    rm -f /frzr_root/swap/swapfile 2>/dev/null

elif [[ -n "${RESUME_OFFSET}" ]]; then
    echo "RESUME_OFFSET 非空, 启动swap服务, 添加到内核参数"

    systemctl enable --now swapfile.service && systemctl enable --now frzr_root-swap-swapfile.swap

    is_enabled=$(systemctl is-enabled frzr_root-swap-swapfile.swap)
    is_active=$(systemctl is-active frzr_root-swap-swapfile.swap)
    if [[ "${is_enabled}" == "enabled" && "${is_active}" == "active" ]]; then
        echo "frzr_root-swap-swapfile.swap is enabled"
    else
        echo "启动swap服务失败, 重新创建swap文件"
        /usr/bin/sk-mkswapfile
        RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r /frzr_root/swap/swapfile)
    fi

    RESUME_CMD="resume=PARTUUID=${root_partuuid} resume_offset=${RESUME_OFFSET}"
    
elif [[ "${SWAP_FILE}" == "1" ]]; then
    echo "新创建 swapfile"
    /usr/bin/sk-mkswapfile

    RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r /frzr_root/swap/swapfile)
    systemctl enable --now swapfile.service
    systemctl enable --now frzr_root-swap-swapfile.swap

    RESUME_CMD="resume=PARTUUID=${root_partuuid} resume_offset=${RESUME_OFFSET}"
fi

echo "RESUME_CMD=${RESUME_CMD}"


# 
FBCON=$(get_fbcon)


# 检查 /boot/loader/entries/frzr.conf 文件是否存在
if [ -f "/boot/loader/entries/frzr.conf" ]; then
    curr_sys=$(grep -o "title [^[:space:]]*" "/boot/loader/entries/frzr.conf"|sed "s/title //")

    # 检查文件中是否已存在 resume=，如果不存在，则添加
    if ! grep -q "resume=" "/boot/loader/entries/frzr.conf" ; then

        echo "Add RESUME_CMD to frzr.conf"
        sed -i "s/ splash / splash ${RESUME_CMD} /" "/boot/loader/entries/frzr.conf"

    else
        # 获取已存在的 resume= 行的内容
        existing_resume=$(grep -o "resume=[^[:space:]]*\(\s*resume_offset=[^[:space:]]*\)\?" "/boot/loader/entries/frzr.conf")
        echo "已存在的 resume: ${existing_resume}"
        
        # 如果现有的 resume= 行与 RESUME_CMD 不匹配，则进行替换
        if [ "${existing_resume}" != "${RESUME_CMD}" ]; then
        
            # 检查文件中是否已存在 resume_offset=，如果存在，则删除
            # existing_resume_offset=$(grep -o "resume_offset=[^[:space:]]*" "/boot/loader/entries/frzr.conf")
            # sed -i "s/${existing_resume_offset} //" "/boot/loader/entries/frzr.conf"

            echo "替换 frzr.conf 中原有的 RESUME_CMD"
            sed -i "s/${existing_resume}/${RESUME_CMD}/" "/boot/loader/entries/frzr.conf"   
            
        else
            NEED_REBOOT=0
            echo "RESUME_CMD已存在并在frzr.conf中, 并且匹配. 无需更新"
        fi
    fi

    # 检查文件中是否已存在 fbcon=，如果不存在，则添加
    if ! grep -q "fbcon=" "/boot/loader/entries/frzr.conf" ; then

        echo "Add FBCON to frzr.conf"
        sed -i "s/ splash / splash ${FBCON} /" "/boot/loader/entries/frzr.conf"

    else
        # 获取已存在的 fbcon= 行的内容
        existing_fbcon=$(grep -o "fbcon=[^[:space:]]*" "/boot/loader/entries/frzr.conf")
        echo "已存在的 fbcon: ${existing_fbcon}"
        
        # 如果现有的 fbcon= 行与 FBCON 不匹配，则进行替换
        if [ "${existing_fbcon}" != "${FBCON}" ]; then

            sed -i "s/video=efifb //" "/boot/loader/entries/frzr.conf"
        
            echo "替换 frzr.conf 中原有的 FBCON"
            sed -i "s/${existing_fbcon}/video=efifb ${FBCON}/" "/boot/loader/entries/frzr.conf"   
            
        else
            NEED_REBOOT=0
            echo "FBCON已存在并在frzr.conf中, 并且匹配. 无需更新"
        fi
    fi


    if [[ "x${NEED_REBOOT}" == "x1" ]]; then
        echo "reboot"
        sk-set-next-boot-entry && reboot
    fi

else
    echo "frzr.conf not found"
fi
