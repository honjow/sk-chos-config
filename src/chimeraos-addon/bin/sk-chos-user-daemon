#!/bin/bash

set -o pipefail

VENDOR=$(cat "/sys/class/dmi/id/sys_vendor")
PRODUCT=$(cat "/sys/class/dmi/id/product_name")
USER_DIR=$HOME
HOMEBREW_FOLDER="${USER_DIR}/homebrew"

function fix_games() {
    if [ -x "$(command -v sk-fix-games)" ]; then
        sk-fix-games
    fi
}

function get_compare_desc() {
    # 数字转为中文描述，0 -> 相等, 正数 -> 大于, 负数 -> 小于
    local compare_result=$1
    if [[ $compare_result -eq 0 ]]; then
        echo "相等"
    elif [[ $compare_result -gt 0 ]]; then
        echo "大于"
    else
        echo "小于"
    fi
}

function compare_version() {
    local version_a=$1
    local version_b=$2
    local version_a_arr=(${version_a//./ })
    local version_b_arr=(${version_b//./ })

    #
    echo ">>> Compare version: ${version_a} and ${version_b}" >&2

    # 取两个版本号的最大长度
    local max_len=${#version_a_arr[@]}
    if [[ ${#version_b_arr[@]} -gt $max_len ]]; then
        max_len=${#version_b_arr[@]}
    fi

    for i in $(seq 0 $max_len); do
        if [[ ${version_b_arr[$i]} == "" ]]; then
            version_b_arr[$i]=0
        fi
        if [[ ${version_a_arr[$i]} == "" ]]; then
            version_a_arr[$i]=0
        fi
        # echo ">>> idx: ${i}, ${version_a_arr[$i]}, ${version_b_arr[$i]}" >&2
        if [[ ${version_a_arr[$i]} -gt ${version_b_arr[$i]} ]]; then
            # echo ">> ${version_a_arr[$i]} > ${version_b_arr[$i]}" >&2
            echo "1"
            return
        elif [[ ${version_a_arr[$i]} -lt ${version_b_arr[$i]} ]]; then
            # echo ">> ${version_a_arr[$i]} < ${version_b_arr[$i]}" >&2
            echo "-1"
            return
        fi
    done
    echo "0"
}

update_decky() {
    echo "Check Decky update"
    set -e
    version_file="${HOMEBREW_FOLDER}/services/.loader.version"
    boot_flag_file="/tmp/.decky-update-booted"

    if [[ ! -f "${boot_flag_file}" ]]; then
        echo "Decky update on boot, sleep 120s"
        sleep 120
        touch "${boot_flag_file}"
    fi

    if [[ -f "${version_file}" ]]; then
        raw_version_current=$(cat "${version_file}" 2>/dev/null)
        version_current=$(echo $raw_version_current | sed 's/^v//' | sed 's/-pre/./')
        echo "Current version: ${raw_version_current}"

        temp_file=$(mktemp)
        curl -s 'https://api.github.com/repos/SteamDeckHomebrew/decky-loader/releases' >$temp_file

        # 删除空格、换行符和其他空白字符
        cleaned_content=$(cat $temp_file | tr -d '[:space:]')
        first_char=${cleaned_content:0:1}
        last_char=${cleaned_content: -1}
        echo "first character: $first_char, last character: $last_char"

        if [[ "$first_char" != "[" ]] || [[ "$last_char" != "]" ]]; then
            echo "Failed to get latest release version, first character: $first_char, last character: $last_char"
            return
        fi

        raw_release_version=$(cat $temp_file | jq -r "first(.[] | select(.prerelease == false))" | jq -r '.tag_name')
        # release_version=$(cat $temp_file | jq -r "first(.[] | select(.prerelease == "false"))" | jq -r '.tag_name' | sed 's/^v//')
        release_version=$(echo $raw_release_version | sed 's/^v//' | sed 's/-pre/./')
        echo "Latest release version: $raw_release_version"

        raw_latest_version=$(cat $temp_file | jq -r "first(.[])" | jq -r '.tag_name')
        # latest_version=$(cat $temp_file | jq -r "first(.[])" | jq -r '.tag_name' | sed 's/^v//' | sed 's/-pre/./')
        latest_version=$(echo $raw_latest_version | sed 's/^v//' | sed 's/-pre/./')
        echo "Latest version: $raw_latest_version"

        cmp_latest_result=$(compare_version $version_current $latest_version)
        cmp_release_result=$(compare_version $version_current $release_version)

        cmp_latest_desc=$(get_compare_desc ${cmp_latest_result})
        cmp_release_desc=$(get_compare_desc ${cmp_release_result})

        echo "版本比较结果, 对比最新版本(含预发布): ${cmp_latest_desc}, 对比最新发布版本: ${cmp_release_desc}"

        # 如果当前版本号包含 -pre, 优先通过 github 地址更新
        if [[ $cmp_latest_result -lt 0 ]] && [[ $raw_version_current =~ "-pre" ]]; then
            echo "Decky 版本过低, 通过 github 地址更新"
            curl -sLk https://github.com/SteamDeckHomebrew/decky-installer/releases/latest/download/install_release.sh | sed 's,#!/bin/sh,#!/bin/sh\nset -e,' | sed 's#| select(.prerelease == "false")##' | sh
        elif [[ $cmp_release_result -lt 0 ]]; then
            echo "Decky 版本过低, 更新"
            set +e
            curl -L http://dl.ohmydeck.net | sh
            if [[ $? -eq 0 ]]; then
                echo "Decky 更新成功"
            else
                echo "Decky 更新失败, 通过 github 地址更新"
                curl -sLk https://github.com/SteamDeckHomebrew/decky-installer/releases/latest/download/install_release.sh | sed 's,#!/bin/sh,#!/bin/sh\nset -e,' | sed 's#| select(.prerelease == "false")##' | sh
            fi
            set -e
        else
            echo "Decky is up to date"
        fi
    else
        echo "Decky is not installed, skip update"
    fi
    exit 0
}

echo "Auto set shell"
if [[ -f /usr/bin/sk-auto-set-shell ]]; then
    /usr/bin/sk-auto-set-shell
fi

echo "reset Internal screen"
sed -i '/Internal screen/d' "${HOME}/.config/gamescope/modes.cfg"

# check gpdconfig and hhd is installed
if [[ -x "$(command -v gpdconfig)" && "$VENDOR" == "GPD" && -x "$(command -v hhd)" ]]; then
    gpdconfig l41=SYSRQ r41=PAUSE \
        l42=NONE r42=NONE l43=NONE r43=NONE l44=NONE r44=NONE \
        l4delay1=0 r4delay1=0 l4delay2=0 r4delay2=0 \
        l4delay3=0 r4delay3=0 l4delay4=20 r4delay4=20
fi

# pacman -Q , check install gnome-shell-extension-screen-autorotate
if [[ $(pacman -Q | grep gnome-shell-extension-screen-autorotate) ]]; then
    echo "gnome-shell-extension-screen-autorotate is installed, set orientation-offset..."
    # check gsettings is installed
    if [[ -x $(command -v gsettings) ]]; then
        if [[ -f /etc/sk-chos/screen-rotate ]]; then
            source /etc/sk-chos/screen-rotate
            echo "set orientation-offset ${ROTATE_OFFSET}"
            gsettings set org.gnome.shell.extensions.screen-rotate orientation-offset "${ROTATE_OFFSET}"
            echo "set manual-flip true"
            gsettings set org.gnome.shell.extensions.screen-rotate manual-flip true
        fi
    fi
fi

# install pre download oh-my-zsh
pre_path=/usr/local/share/sk-pre
zsh_path=$pre_path/zsh
pre_zsh_dir=$pre_path/zsh/ohmyzsh
pre_zshrc=$pre_path/zsh/.zshrc

if [[ -d $pre_zsh_dir ]]; then
    if [[ ! -d "${HOME}/.oh-my-zsh" ]]; then
        echo "Installing oh-my-zsh..."
        rsync -av "${pre_zsh_dir}/" "${HOME}/.oh-my-zsh/"
    fi
fi

zshrc_path="${HOME}/.zshrc"
if [[ -f $pre_zshrc ]]; then
    if [[ ! -f "$zshrc_path" ]]; then
        echo ">> Installing .zshrc..."
        cp $pre_zshrc "${HOME}/.zshrc"
    else
        # 获取 $zshrc_path 行数
        zshrc_line=$(wc -l $zshrc_path | awk '{print $1}')
        # 如果行数小于 xx 行, 则覆盖
        if [[ $zshrc_line -lt 110 ]]; then
            echo ">>> Installing .zshrc..."
            cp $pre_zshrc "${HOME}/.zshrc"
            rsync -av "${pre_zsh_dir}/" "${HOME}/.oh-my-zsh/"
        else
            cp $pre_zshrc "${HOME}/.zshrc.new"
        fi
    fi
fi

# after update run
after_update_flag=/.after-update
flag_file=/etc/sk-first-setup-done
if [[ ! -f "$after_update_flag" && -f "$flag_file" ]]; then
    echo "after update run first-run..."
    /usr/bin/sk-first-setup --update
    sudo touch $after_update_flag
fi

# user auto start
script_dir="$HOME/.config/sk-chos-tool/startup"
if [[ ! -d $script_dir ]]; then
    mkdir -p $script_dir
fi
for script in $(ls $script_dir); do
    if [[ -x "${script_dir}/${script}" ]]; then
        echo "run ${script_dir}/${script}"
        exec "${script_dir}/${script}"
    fi
done

# 如果安装了kde桌面, 根据 $HOME/.config/plasma-localerc 更新 locale.conf
if pacman -Q | grep -q plasma-desktop; then
    if [[ -f $HOME/.config/plasma-localerc ]]; then
        # 读取 plasma-localerc 中 LANG= 的值
        LANG=$(grep LANG= $HOME/.config/plasma-localerc | cut -d= -f2)
        ORIG_LANG=$LANG
        # 去掉.后面的内容
        LANG=${LANG%%.*}

        if [[ "${ORIG_LANG}" != "${LANG}.UTF-8" ]]; then
            echo "update plasma-localerc LANG=${LANG}.UTF-8"
            sed -i "s/LANG=.*/LANG=${LANG}.UTF-8/" $HOME/.config/plasma-localerc
        fi

        # 读取 /etc/locale.conf 中 LANG= 的值
        E_LANG=$(grep LANG= /etc/locale.conf | cut -d= -f2)
        if [[ "${E_LANG}" != "${LANG}.UTF-8" ]]; then
            echo "update locale.conf LANG=${LANG}.UTF-8"
            echo "LANG=${LANG}.UTF-8" | sudo tee /etc/locale.conf
            sudo locale-gen
        fi
    fi
fi

# fontconfig
fontconfig_dir="$HOME/.config/fontconfig/conf.d"
mkdir -p $fontconfig_dir

noto_cjk_conf="75-noto-cjk.conf"
sarasa_conf="90-sarasa-gothic.conf"

noto_cjk_path="/etc/fonts/conf.d/${noto_cjk_conf}"
sarasa_path="/etc/fonts/conf.d/${sarasa_conf}"

user_noto_cjk_path="$fontconfig_dir/${noto_cjk_conf}"
user_sarasa_path="$fontconfig_dir/${sarasa_conf}"

if [[ -f $noto_cjk_path && ! -f $user_noto_cjk_path ]]; then
    echo "copy $noto_cjk_path to $fontconfig_dir"
    cp $noto_cjk_path $fontconfig_dir
fi

if [[ -f $sarasa_path && ! -f $user_sarasa_path ]]; then
    echo "copy $sarasa_path to $fontconfig_dir"
    cp $sarasa_path $fontconfig_dir
fi

# gamescope-gestures
gamescope_gestures_conf="$HOME/.config/environment.d/chos-disable-gamescope-gestures.conf"
if [ ! -f $gamescope_gestures_conf ]; then
    /usr/bin/cjust disable-swipe-gestures || true
fi

# Audio Fix
if [ -x "$(command -v sk-audio-setup)" ]; then
    sk-audio-setup
fi

# copy wireplumber config
if [ -x "/usr/libexec/user-wireplumber" ]; then
    /usr/libexec/user-wireplumber
fi

fix_games &

# Decky update
update_decky &
