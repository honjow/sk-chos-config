#!/bin/bash

# Check if the script is running with root or sudo privileges
if [ "$EUID" -ne 0 ]; then
    echo "This script must be run as root or with sudo."
    exit 1
fi

set -eo pipefail

# reboot flag
if [[ "$1" == "--reboot" ]]; then
    REBOOT=true
fi

flag_file="/etc/.first-reboot-required"
if [[ -f "$flag_file" ]]; then
    REBOOT=true
fi

if [[ "$1" == "--force" ]]; then
    FORCE=true
fi

NEED_REBOOT="0"

# echo "start frzr-unlock"
# frzr-unlock

get_fbcon() {
    if [[ -f /etc/sk-chos/screen-rotate ]]; then
        source /etc/sk-chos/screen-rotate
    fi

    if [[ -n "$FBCON_PARA" ]]; then
        echo "fbcon=$FBCON_PARA"
    fi
}

get_video() {
    if [[ -f /etc/sk-chos/screen-rotate ]]; then
        source /etc/sk-chos/screen-rotate
    fi

    if [[ -n "$VIDEO_PARA" ]]; then
        echo "video=$VIDEO_PARA"
    fi
}

# source /etc/sk-chos/sk-chos.conf
if [ -d /tmp/frzr_root ]; then
    source ${MOUNT_PATH}/etc/sk-chos/sk-chos.conf
else
    source /etc/sk-chos/sk-chos.conf
fi

# systemd-bootx64.efi 忽略大小写
if efibootmgr | grep "Linux Boot Manager" | grep -iq "systemd-bootx64.efi"; then
    # Linux Boot Manager 已存在，不需要再次添加
    echo "Linux Boot Manager exists, no need to add it"
else
    # Linux Boot Manager 不存在，添加
    echo "Linux Boot Manager not exists, add it"
    /usr/bin/sk-chos-boot-fix || true
fi

# swap uuid
swap_dev=$(awk '$2 == "partition" && $1 ~ "^/dev/[^z]" {print $1}' /proc/swaps)
if [[ -n "$swap_dev" ]]; then
    SWAP_PARTUUID=$(lsblk -no PARTUUID -f "$swap_dev")
fi
echo "SWAP_PARTUUID=$SWAP_PARTUUID"

# swap conf
root_partuuid=$(lsblk -no PARTUUID $(mount | grep ' / ' | cut -d' ' -f1))

if [ -f "/frzr_root/swap/swapfile" ]; then
    RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r /frzr_root/swap/swapfile)
fi

MK_SWAPFILE_SERVICE="sk-mkswapfile.service"
SWAP_FILE_SERVICE="frzr_root-swap-swapfile.swap"

RESUME_CMD=""
if [[ -n "${SWAP_PARTUUID}" ]]; then
    echo "SWAP_PARTUUID 非空，添加到内核参数"
    RESUME_CMD="resume=PARTUUID=${SWAP_PARTUUID}"

    systemctl disable --now $MK_SWAPFILE_SERVICE
    systemctl disable --now $SWAP_FILE_SERVICE

    rm -f /frzr_root/swap/swapfile || true

elif [[ -n "${RESUME_OFFSET}" ]]; then
    echo "RESUME_OFFSET 非空, 启动swap服务, 添加到内核参数"

    systemctl enable --now $MK_SWAPFILE_SERVICE && systemctl enable --now $SWAP_FILE_SERVICE

    is_enabled=$(systemctl is-enabled $SWAP_FILE_SERVICE)
    is_active=$(systemctl is-active $SWAP_FILE_SERVICE)
    if [[ "${is_enabled}" == "enabled" && "${is_active}" == "active" ]]; then
        echo "$SWAP_FILE_SERVICE is enabled"
    else
        echo "启动swap服务失败, 重新创建swap文件"
        /usr/bin/sk-mkswapfile
        RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r /frzr_root/swap/swapfile)
    fi

    RESUME_CMD="resume=PARTUUID=${root_partuuid} resume_offset=${RESUME_OFFSET}"

elif [[ "${CREAT_SWAP_FILE}" == "1" ]]; then
    echo "新创建 swapfile"
    /usr/bin/sk-mkswapfile

    RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r /frzr_root/swap/swapfile)
    systemctl enable --now $MK_SWAPFILE_SERVICE
    systemctl enable --now $SWAP_FILE_SERVICE

    RESUME_CMD="resume=PARTUUID=${root_partuuid} resume_offset=${RESUME_OFFSET}"
fi

echo "RESUME_CMD=${RESUME_CMD}"

FBCON=$(get_fbcon 2>/dev/null)
echo "FBCON: ${FBCON}"

VIDEO=$(get_video 2>/dev/null)
echo "VIDEO: ${VIDEO}"

# 遍历 /frzr_root/boot/loader/entries 路径下的所有 frzr*.conf 文件
for conf in /frzr_root/boot/loader/entries/frzr*.conf; do
    if [ -f "$conf" ]; then
        conf_base_name=$(basename "$conf")
        curr_sys=$(grep -o "title [^[:space:]]*" "$conf" | sed "s/title //")

        # 检查文件中是否已存在 resume=，如果不存在，则添加
        if ! grep -q "resume=" "$conf"; then

            echo "Add RESUME_CMD to $conf_base_name"
            sed -i "s/ splash / splash ${RESUME_CMD} /" "$conf"

        else
            # 获取已存在的 resume= 行的内容
            existing_resume=$(grep -o "resume=[^[:space:]]*\(\s*resume_offset=[^[:space:]]*\)\?" "$conf")
            echo "已存在的 resume: ${existing_resume}"

            # 如果现有的 resume= 行与 RESUME_CMD 不匹配，则进行替换
            if [ "${existing_resume}" != "${RESUME_CMD}" ]; then

                echo "替换 $conf_base_name 中原有的 RESUME_CMD"
                sed -i "s/${existing_resume}/${RESUME_CMD}/" "$conf"

                NEED_REBOOT=$((NEED_REBOOT + 1))
            else
                echo "RESUME_CMD已存在并在$file中, 并且匹配. 无需更新"
            fi
        fi

        # 检查文件中是否已存在 fbcon=，如果不存在，则添加
        if ! grep -q "fbcon=" "$conf"; then

            if [[ -n "${FBCON}" ]]; then
                echo "Add $FBCON to $conf_base_name"
                sed -i "s/ splash / splash ${FBCON} /" "$conf"
            fi

        else
            # 获取已存在的 fbcon= 行的内容
            existing_fbcon=$(grep -o "fbcon=[^[:space:]]*" "$conf")
            echo "已存在的 fbcon: ${existing_fbcon}"

            # 如果现有的 fbcon= 行与 FBCON 不匹配，则进行替换
            if [ "${existing_fbcon}" != "${FBCON}" ]; then

                echo "替换 $conf_base_name 中原有的 FBCON"
                sed -i "s/${existing_fbcon}/${FBCON}/" "$conf"

                NEED_REBOOT=$((NEED_REBOOT + 1))

            else
                echo "FBCON 已存在 $conf_base_name 中, 并且匹配. 无需更新"
            fi
        fi

        # 检查文件中是否已存在 video=，如果不存在，则添加
        if ! grep -q "video=" "$conf"; then

            if [[ -n "${FBCON}" ]]; then
                echo "Add $VIDEO to $conf_base_name"
                sed -i "s/ splash / splash ${VIDEO} /" "$conf"
            fi

        else
            # 获取已存在的 video= 行的内容
            existing_video=$(grep -o "video=[^[:space:]]*" "$conf")
            echo "已存在的 video: ${existing_video}"

            # 如果现有的 video= 行与 VIDEO 不匹配，则进行替换
            if [ "${existing_video}" != "${VIDEO}" ]; then
                echo "替换 $conf_base_name 中原有的 VIDEO"
                sed -i "s/${existing_video}/${VIDEO}/" "$conf"

                NEED_REBOOT=$((NEED_REBOOT + 1))

            else
                echo "VIDEO 已存在 $conf_base_name 中, 并且匹配. 无需更新"
            fi
        fi
    fi
done

# if (NEED_REBOOT > 1 and REBOOT) or FORCE:
if [[ $NEED_REBOOT -gt 1 && $REBOOT == true ]] || [[ $FORCE == true ]]; then
    echo "重启系统"
    if [[ -f "$flag_file" ]]; then
        rm -f "$flag_file"
    fi
    sk-set-next-boot-entry && reboot
fi