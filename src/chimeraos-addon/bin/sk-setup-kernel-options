#!/bin/bash

set -eo pipefail
trap 'echo "Error on line $LINENO"' ERR

function kernel_options_manager() {
    scripts_path="/usr/share/device-quirks/scripts/kernel-options-manager"
    if [[ -x "$scripts_path" ]]; then
        sudo "$scripts_path" "$@"
    else
        echo "Error: script $scripts_path not found" >&2
        exit 1
    fi
}

# 初始化变量
REBOOT=false
FORCE=false
NEED_REBOOT=0
MOUNT_PATH=${MOUNT_PATH:-"/"}
flag_file="/etc/.first-reboot-required"

# Check if the script is running with root or sudo privileges
if [[ "$EUID" -ne 0 ]]; then
    echo "This script must be run as root or with sudo."
    exit 1
fi

# 处理命令行参数
if [[ "${1:-}" == "--reboot" ]]; then
    REBOOT=true
elif [[ "${1:-}" == "--force" ]]; then
    FORCE=true
fi

# 检查首次启动标志
[[ -f "$flag_file" ]] && REBOOT=true

# reboot flag
if [[ "${1:-}" == "--reboot" ]]; then
    REBOOT=true
fi

flag_file="/etc/.first-reboot-required"
if [[ -f "$flag_file" ]]; then
    REBOOT=true
fi

if [[ "${1:-}" == "--force" ]]; then
    FORCE=true
fi

get_fbcon() {
    local fbcon_file="/etc/sk-chos/screen-rotate"
    if [[ -f "$fbcon_file" ]]; then
        source "$fbcon_file"
        if [[ -n "${FBCON_PARA:-}" ]]; then
            echo "fbcon=${FBCON_PARA}"
        fi
    fi
    return 0
}

get_video() {
    local video_file="/etc/sk-chos/screen-rotate"
    if [[ -f "$video_file" ]]; then
        source "$video_file"
        if [[ -n "${VIDEO_PARA:-}" ]]; then
            echo "video=${VIDEO_PARA}"
        fi
    fi
    return 0
}

# 检查并加载配置文件
if [[ ! -f "/etc/sk-chos/sk-chos.conf" ]]; then
    echo >&2 "警告: 配置文件 /etc/sk-chos/sk-chos.conf 不存在"
fi

if [[ -d "/tmp/frzr_root" ]]; then
    if [[ ! -f "${MOUNT_PATH}/etc/sk-chos/sk-chos.conf" ]]; then
        echo >&2 "警告: 配置文件 ${MOUNT_PATH}/etc/sk-chos/sk-chos.conf 不存在"
    else
        source "${MOUNT_PATH}/etc/sk-chos/sk-chos.conf"
    fi
else
    source "/etc/sk-chos/sk-chos.conf"
fi

# systemd-bootx64.efi 忽略大小写
if efibootmgr | grep -i "Linux Boot Manager" | grep -iq "systemd-bootx64.efi"; then
    echo "Linux Boot Manager exists, no need to add it"
else
    echo "Linux Boot Manager not exists, add it"
    /usr/bin/sk-chos-boot-fix || echo >&2 "警告: sk-chos-boot-fix 执行失败"
fi

# 获取 swap 设备信息
swap_dev=$(awk '$2 == "partition" && $1 ~ "^/dev/[^z]" {print $1}' /proc/swaps)
SWAP_PARTUUID=""
if [[ -n "$swap_dev" ]]; then
    SWAP_PARTUUID=$(lsblk -no PARTUUID -f "$swap_dev")
fi
echo "SWAP_PARTUUID=$SWAP_PARTUUID"

# 获取根分区 UUID
root_partuuid=$(lsblk -no PARTUUID "$(mount | grep ' / ' | cut -d' ' -f1)")

# 处理 swapfile
RESUME_OFFSET=""
if [[ -f "/frzr_root/swap/swapfile" ]]; then
    RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r "/frzr_root/swap/swapfile") || echo >&2 "警告: 获取 swapfile offset 失败"
fi

SWAP_FILE_SERVICE="frzr_root-swap-swapfile.swap"

function enable_swapfile() {
    is_enabled=$(systemctl is-enabled "$SWAP_FILE_SERVICE")
    if [[ "${is_enabled}" == "enabled" ]]; then
        echo "$SWAP_FILE_SERVICE is enabled"
    else
        systemctl enable "$SWAP_FILE_SERVICE" || return 1
    fi

    is_active=$(systemctl is-active "$SWAP_FILE_SERVICE")
    if [[ "${is_active}" == "active" ]]; then
        systemctl restart "$SWAP_FILE_SERVICE" || return 1
    else
        systemctl start "$SWAP_FILE_SERVICE" || return 1
    fi
    return 0
}

function disable_swapfile() {
    is_active=$(systemctl is-active "$SWAP_FILE_SERVICE")
    if [[ "${is_active}" == "active" ]]; then
        systemctl stop "$SWAP_FILE_SERVICE" || return 1
    fi

    is_enabled=$(systemctl is-enabled "$SWAP_FILE_SERVICE")
    if [[ "${is_enabled}" == "enabled" ]]; then
        systemctl disable "$SWAP_FILE_SERVICE" || return 1
    fi
    return 0
}

# 设置 resume 命令
RESUME_CMD=""
if [[ -n "${SWAP_PARTUUID}" ]]; then
    echo "SWAP_PARTUUID 非空，添加到内核参数"
    RESUME_CMD="resume=PARTUUID=${SWAP_PARTUUID}"

    disable_swapfile

    rm -f "/frzr_root/swap/swapfile" || echo >&2 "警告: 删除 swapfile 失败"

elif [[ -n "${RESUME_OFFSET}" ]]; then
    echo "RESUME_OFFSET 非空, 启动swap服务, 添加到内核参数"

    if ! enable_swapfile; then
        echo >&2 "启动swap服务失败, 重新创建swap文件"
        if ! /usr/bin/sk-mkswapfile; then
            echo >&2 "错误: 创建 swapfile 失败"
        else
            RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r "/frzr_root/swap/swapfile") || echo >&2 "警告: 获取 swapfile offset 失败"
        fi
    fi

    RESUME_CMD="resume=PARTUUID=${root_partuuid}"
    RESUME_OFFSET_CMD="resume_offset=${RESUME_OFFSET}"

elif [[ "${CREATE_SWAP_FILE:-0}" == "1" ]]; then
    echo "新创建 swapfile"
    if ! /usr/bin/sk-mkswapfile; then
        echo >&2 "错误: 创建 swapfile 失败"
    else
        RESUME_OFFSET=$(btrfs inspect-internal map-swapfile -r "/frzr_root/swap/swapfile") || echo >&2 "警告: 获取 swapfile offset 失败"
        enable_swapfile
        RESUME_CMD="resume=PARTUUID=${root_partuuid}"
        RESUME_OFFSET_CMD="resume_offset=${RESUME_OFFSET}"
    fi
fi

# 获取显示相关参数
FBCON=$(get_fbcon 2>/dev/null)
echo "FBCON: ${FBCON}"

VIDEO=$(get_video 2>/dev/null)
echo "VIDEO: ${VIDEO}"

# 更新内核参数
# 更新 resume 参数
if [[ -n "$RESUME_CMD" ]]; then
    if ! kernel_options_manager --append "${RESUME_CMD}" | grep -q "No changes needed"; then
        NEED_REBOOT=$((NEED_REBOOT + 1))
    fi
else
    kernel_options_manager --remove "resume"
fi

# 更新 resume_offset 参数
if [[ -n "$RESUME_OFFSET_CMD" ]]; then
    if ! kernel_options_manager --append "${RESUME_OFFSET_CMD}" | grep -q "No changes needed"; then
        NEED_REBOOT=$((NEED_REBOOT + 1))
    fi
else
    kernel_options_manager --remove "resume_offset"
fi

# 更新 fbcon 参数
if [[ -n "$FBCON" ]]; then
    if ! kernel_options_manager --append "${FBCON}" | grep -q "No changes needed"; then
        NEED_REBOOT=$((NEED_REBOOT + 1))
    fi
else
    kernel_options_manager --remove "fbcon"
fi

# 更新 video 参数
if [[ -n "$VIDEO" ]]; then
    if ! kernel_options_manager --append "${VIDEO}" | grep -q "No changes needed"; then
        NEED_REBOOT=$((NEED_REBOOT + 1))
    fi
else
    kernel_options_manager --remove "video"
fi

echo "NEED_REBOOT=$NEED_REBOOT"

# 处理重启
if [[ $NEED_REBOOT -gt 1 && $REBOOT == true ]] || [[ $FORCE == true ]]; then
    echo "重启系统"
    if [[ -f "$flag_file" ]]; then
        rm -f "$flag_file" || echo "警告: 删除标志文件失败"
    fi
    if ! sk-setup-next-boot; then
        echo "错误: 设置下次启动项失败"
        exit 1
    fi
    reboot
fi
