#!/bin/bash

if [ "$EUID" -ne 0 ]; then
    echo "This script must be run as root or with sudo."
    exit 1
fi

PRODUCT=$(cat /sys/class/dmi/id/product_name)
VENDOR=$(cat /sys/class/dmi/id/sys_vendor)

if [ -x "$(command -v sk-unlock-pacman)" ]; then
    sk-unlock-pacman
fi

# 启用内核模块黑名单
BLACKLIST_HID_ALLY=""

ASUS_ALLY_HID_BLACKLIST="/etc/modprobe.d/asus_ally_hid.conf"
ASUS_ALLY_HID_MOD_NAME="asus_ally_hid"

function is_exist_mod() {
    local ASUS_ALLY_HID_MOD_NAME=$1
    lsmod | grep "$ASUS_ALLY_HID_MOD_NAME" >/dev/null 2>&1
}

function toggle_mcu_powersave() {
    local ENABLE_MCU_POWERSAVE=""

    # 默认禁用 mcu powersave。 启用会导致 ROG Ally 睡眠唤醒后 N-Key 丢失
    if [[ "$PRODUCT" =~ "ROG Ally RC71L" ]]; then
        ENABLE_MCU_POWERSAVE="0"

        # 如果内核名称包含 -sk -chimeraos 或者 -skchos ,启用 mcu powersave
        if [[ "$(uname -r)" =~ -sk.*-.*chimeraos || "$(uname -r)" =~ -skchos ]]; then
            ENABLE_MCU_POWERSAVE="1"
        fi
    elif [[ "$PRODUCT" =~ "ROG Ally X RC72L" ]]; then
        ENABLE_MCU_POWERSAVE="1"
    fi

    echo "Enable MCU powersave: $ENABLE_MCU_POWERSAVE"
    if [ -n "$ENABLE_MCU_POWERSAVE" ]; then
        for i in /sys/devices/platform/*/mcu_powersave; do
            if [ -f "$i" ]; then
                if [ "$(cat $i)" != "$ENABLE_MCU_POWERSAVE" ]; then
                    echo "$ENABLE_MCU_POWERSAVE" >$i
                fi
            fi
        done
        ASUS_ARMOR_PATH="/sys/class/firmware-attributes/asus-armoury/attributes/mcu_powersave"
        if [ -f "$ASUS_ARMOR_PATH/current_value" ]; then
            if [ "$(cat $ASUS_ARMOR_PATH/current_value)" != "$ENABLE_MCU_POWERSAVE" ]; then
                echo "$ENABLE_MCU_POWERSAVE" >$ASUS_ARMOR_PATH/current_value
            fi
        fi
    fi
}

function enable_hhd() {
    echo "enable hhd, and disable inputplumber"
    systemctl disable --now inputplumber || true
    # systemctl disable --now steam-powerbuttond || true

    # check hhd@gamer is masked
    is_masked=$(systemctl is-enabled hhd@gamer)
    if [[ "$is_masked" == "masked" ]]; then
        systemctl unmask hhd@gamer
    fi
    systemctl enable --now hhd@gamer
    echo "Enable hhd finished"
}

function enable_inputplumber() {
    echo "enable inputplumber, and disable hhd"

    systemctl disable --now hhd@gamer || true

    # check inputplumber is masked
    is_masked=$(systemctl is-enabled inputplumber)
    if [[ "$is_masked" == "masked" ]]; then
        systemctl unmask inputplumber
    fi
    systemctl enable --now inputplumber
    # systemctl enable --now steam-powerbuttond || true
    echo "Enable inputplumber finished"
}

function enable_hhd_allyx() {
    if [[ "$PRODUCT" =~ "ROG Ally X RC72L" ]]; then
        if [[ -n "$(is_exist_mod "$ASUS_ALLY_HID_MOD_NAME")" ]]; then
            echo "mod $ASUS_ALLY_HID_MOD_NAME is exist, disable it"
            echo "blacklist $ASUS_ALLY_HID_MOD_NAME" >$ASUS_ALLY_HID_BLACKLIST
            depmod -a
            modprobe -r $ASUS_ALLY_HID_MOD_NAME
        fi
    fi
    enable_hhd
}

function enable_inputplumber_allyx() {
    if [[ "$PRODUCT" =~ "ROG Ally X RC72L" ]]; then
        if [[ -z "$(is_exist_mod "$ASUS_ALLY_HID_MOD_NAME")" ]]; then
            echo "mod $ASUS_ALLY_HID_MOD_NAME is not exist, enable it"
            depmod -a
            modprobe $ASUS_ALLY_HID_MOD_NAME
            if [[ -f "$ASUS_ALLY_HID_BLACKLIST" ]]; then
                echo "Remove blacklist $ASUS_ALLY_HID_MOD_NAME"
                rm -f "$ASUS_ALLY_HID_BLACKLIST"
                depmod -a
            fi
        fi
    fi
    enable_inputplumber
}

function gamepad_fix_for_allyx() {
    echo "gamepad fix for allyx"

    if [[ ! "$PRODUCT" =~ "ROG Ally X RC72L" ]]; then
        return
    fi

    hhd_status=$(systemctl is-enabled hhd@gamer)
    inputplumber_status=$(systemctl is-enabled inputplumber)
    if [[ "$hhd_status" == "enabled" && "$inputplumber_status" == "enabled" ]]; then
        echo "hhd and inputplumber both enabled, should be only enable hhd"
        enable_hhd_allyx
    else
        if [[ "$hhd_status" == "enabled" ]]; then
            enable_hhd_allyx
        else
            enable_inputplumber_allyx
        fi
    fi
}

function gamepad_fix_for_allyx_old() {
    echo "gamepad fix for allyx"
    local IS_ENABLE_ASUS_ALLY_HID=""
    IS_ENABLE_ASUS_ALLY_HID=$(is_exist_mod "$ASUS_ALLY_HID_MOD_NAME")

    if [[ "$PRODUCT" =~ "ROG Ally X RC72L" ]]; then
        # 如果声明了启用模块黑名单，并且模块存在
        if [[ "$BLACKLIST_HID_ALLY" == "Y" && -n "$IS_ENABLE_ASUS_ALLY_HID" ]]; then
            echo "Force blacklist $ASUS_ALLY_HID_MOD_NAME"
            if [ ! -f "$ASUS_ALLY_HID_BLACKLIST" ]; then
                # 如果黑名单文件不存在，则创建黑名单文件，并禁用模块，并启用 hhd
                echo "blacklist $ASUS_ALLY_HID_MOD_NAME" >$ASUS_ALLY_HID_BLACKLIST
                depmod -a
                modprobe -r $ASUS_ALLY_HID_MOD_NAME
                enable_hhd
            else
                # 如果名单文件存在，则检查模块是否存在黑名单中。如果不存在，添加到黑名单，并禁用模块，并启用 hhd
                check=$(cat $ASUS_ALLY_HID_BLACKLIST | grep "blacklist ${ASUS_ALLY_HID_MOD_NAME}")
                if [ -z "$check" ]; then
                    echo "blacklist $ASUS_ALLY_HID_MOD_NAME" >$ASUS_ALLY_HID_BLACKLIST
                    depmod -a
                    modprobe -r ASUS_ALLY_HID_MOD_NAME
                    enable_hhd
                fi
            fi
        else
            # 其它情况
            if [ -f "$ASUS_ALLY_HID_BLACKLIST" ]; then
                # 如果名单文件存在，则删除黑名单，并启用模块
                echo "Remove blacklist $ASUS_ALLY_HID_MOD_NAME"
                rm -f "$ASUS_ALLY_HID_BLACKLIST"
                depmod -a
                modprobe $ASUS_ALLY_HID_MOD_NAME
            fi

            IS_ENABLE_ASUS_ALLY_HID=$(is_exist_mod "$ASUS_ALLY_HID_MOD_NAME")

            if [ -n "$IS_ENABLE_ASUS_ALLY_HID" ]; then
                echo "Start Enable inputplumber"
                enable_inputplumber
            else
                echo "Start Enable hhd"
                # hhd flag file
                hhd_flag_file="/etc/.hhd_flag"
                kernel_version=$(uname -r)
                if [[ ! -f "$hhd_flag_file" || "$(cat $hhd_flag_file)" != "$kernel_version" ]]; then
                    echo "Flag file not found or kernel version changed"
                    enable_hhd
                    echo "$kernel_version" >$hhd_flag_file
                else
                    echo "Flag file found and kernel version not changed, skip enable hhd"
                fi
            fi
        fi
    fi
    echo "gamepad fix for allyx finished"
}

toggle_mcu_powersave

gamepad_fix_for_allyx

# 为 atd 创建目录
mkdir -p /var/spool/atd

# frzr-unlock
if [ -x "$(command -v frzr-unlock)" ]; then
    frzr-unlock
fi

# /var/lib/boltd/version
if [[ -z "$(cat /var/lib/boltd/version 2>/dev/null)" ]]; then
    echo "1" >/var/lib/boltd/version
fi

# asusctl
shortcut_path="/usr/share/applications/rog-control-center.desktop"
no_display="false"
if [[ "$VENDOR" != "ASUSTeK COMPUTER INC." ]]; then
    no_display="true"
fi

if [[ -f "$shortcut_path" ]]; then
    if grep -q "NoDisplay=" "$shortcut_path"; then
        sed -i "s/NoDisplay=.*/NoDisplay=$no_display/" "$shortcut_path"
    else
        echo "NoDisplay=$no_display" >>"$shortcut_path"
    fi
fi

# WAYDROID FIX
if [[ -f "/var/lib/waydroid/lxc/waydroid/config" ]]; then
    # echo "Removing unneeded apparmor entry from Waydroid LXC"
    # sed -i '/lxc\.apparmor\.profile\s*=\s*unconfined/d' "/var/lib/waydroid/lxc/waydroid/config"
    if grep -q "lxc.apparmor.profile" "/var/lib/waydroid/lxc/waydroid/config"; then
        echo "Removing unneeded apparmor entry from Waydroid LXC"
        sed -i '/lxc\.apparmor\.profile\s*=\s*unconfined/d' "/var/lib/waydroid/lxc/waydroid/config"
    fi
fi

# set hibernatemode
sleep_conf_dir="/etc/systemd/sleep.conf.d"
hibernatemode_config="${sleep_conf_dir}/hibernatemode.conf"
config=$(cat $hibernatemode_config | grep "HibernateMode")
if [[ ! -f "$hibernatemode_config" || -z $config ]]; then
    mkdir -p "$sleep_conf_dir"
    echo "[Sleep]" >"$hibernatemode_config"
    echo "HibernateMode=shutdown" >>"$hibernatemode_config"
fi

# setup aw87xxx
if [ -x "/usr/libexec/aw87xxx-setup" ]; then
    /usr/libexec/aw87xxx-setup
fi

# fstab
DEPLOYMENT=$(frzr-release)
fstab_path="/frzr_root/etc/fstab"
deployment_fstab_path="/frzr_root/deployments/${DEPLOYMENT}/etc/fstab"
# 如果内容相同 删除 fstab_path
if [[ -f "$fstab_path" && -f "$deployment_fstab_path" ]]; then
    if grep -q "$(cat "$fstab_path" 2>/dev/null)" "$deployment_fstab_path" 2>/dev/null; then
        rm -f "$fstab_path"
    fi
fi

# sk-quirks
if [ -x "$(command -v sk-quirks)" ]; then
    sk-quirks
fi

# setcap mangohud
if [ -x "$(command -v mangohud)" ]; then
    setcap cap_perfmon=+ep "$(command -v mangohud)"
fi
