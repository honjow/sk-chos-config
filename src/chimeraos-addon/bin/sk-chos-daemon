#!/bin/bash

if [ "$EUID" -ne 0 ]; then
    echo "This script must be run as root or with sudo."
    exit 1
fi

PRODUCT=$(cat /sys/class/dmi/id/product_name)
VENDOR=$(cat /sys/class/dmi/id/sys_vendor)

if [ -x "$(command -v sk-unlock-pacman)" ]; then
    sk-unlock-pacman
fi

# 启用内核模块黑名单
BLACKLIST_HID_ALLY=""

# 新版本内核处理标志
ALLY_NEW_KERNEL_PROC_FLAG=""

ENABLE_MCU_POWERSAVE=""

# 默认禁用 mcu powersave。 启用会导致 ROG Ally 睡眠唤醒后 N-Key 丢失
if [[ "$PRODUCT" =~ "ROG Ally RC71L" ]]; then
    ENABLE_MCU_POWERSAVE="0"

    # 如果内核名称包含 -skX-chimeraos-X ，启用 mcu powersave
    if [[ "$(uname -r)" =~ -sko?[1-9]-chimeraos-[1-9] ]]; then
        ENABLE_MCU_POWERSAVE="1"
    fi
elif [[ "$PRODUCT" =~ "ROG Ally X RC72L" ]]; then
    ENABLE_MCU_POWERSAVE="1"
    # 如果内核名称包含 -skX-chimeraos-X ，hid-asus-rog-ally 加入黑名单
    if [[ "$(uname -r)" =~ -sk[1-9]-chimeraos-[1-9] ]]; then
        ALLY_NEW_KERNEL_PROC_FLAG="1"
    fi
fi

echo "Enable MCU powersave: $ENABLE_MCU_POWERSAVE"
if [ -n "$ENABLE_MCU_POWERSAVE" ]; then
    if [ -f /sys/devices/platform/*/mcu_powersave ]; then
        for i in /sys/devices/platform/*/mcu_powersave; do
            if [ "$(cat $i)" != "$ENABLE_MCU_POWERSAVE" ]; then
                echo "$ENABLE_MCU_POWERSAVE" >$i
            fi
        done
    fi
    if [ -f /sys/class/firmware-attributes/asus-armoury/attributes/mcu_powersave/current_value ]; then
        if [ "$(cat /sys/class/firmware-attributes/asus-armoury/attributes/mcu_powersave/current_value)" != "$ENABLE_MCU_POWERSAVE" ]; then
            echo "$ENABLE_MCU_POWERSAVE" >/sys/class/firmware-attributes/asus-armoury/attributes/mcu_powersave/current_value
        fi
    fi
fi

function enable_hhd() {
    systemctl disable --now inputplumber || true

    # check hhd@gamer is masked
    is_masked=$(systemctl is-enabled hhd@gamer)
    if [[ "$is_masked" == "masked" ]]; then
        systemctl unmask hhd@gamer
    fi
    systemctl enable --now hhd@gamer
    echo "Enable hhd"
}

function enable_inputplumber() {
    systemctl disable --now hhd@gamer || true

    # check inputplumber is masked
    is_masked=$(systemctl is-enabled inputplumber)
    if [[ "$is_masked" == "masked" ]]; then
        systemctl unmask inputplumber
    fi
    systemctl enable --now inputplumber
    echo "Enable inputplumber"
}

blacklist_file="/etc/modprobe.d/hid-asus-rog-ally.conf"
mod_name="hid_asus_ally"

if [[ "$PRODUCT" =~ "ROG Ally X RC72L" ]]; then
    if [[ "$BLACKLIST_HID_ALLY" == "Y" && -n "$ALLY_NEW_KERNEL_PROC_FLAG" ]]; then
        echo "Force blacklist $mod_name"
        if [ ! -f "$blacklist_file" ]; then
            echo "blacklist $mod_name" >$blacklist_file
            depmod -a
            modprobe -r $mod_name
            enable_hhd
        else
            check=$(cat $blacklist_file | grep "blacklist ${mod_name}")
            if [ -z "$check" ]; then
                echo "blacklist $mod_name" >$blacklist_file
                depmod -a
                modprobe -r mod_name
                enable_hhd
            fi
        fi
    else
        if [ -f "$blacklist_file" ]; then
            echo "Remove blacklist $mod_name"
            rm -f "$blacklist_file"
            depmod -a
            modprobe -r $mod_name
        fi

        if [ -n "$ALLY_NEW_KERNEL_PROC_FLAG" ]; then
            echo "Start Enable inputplumber"
            enable_inputplumber
        else
            echo "Start Enable hhd"
            # hhd flag file
            hhd_flag_file="/etc/.hhd_flag"
            kernel_version=$(uname -r)
            if [[ ! -f "$hhd_flag_file" || "$(cat $hhd_flag_file)" != "$kernel_version" ]]; then
                echo "Flag file not found or kernel version changed"
                enable_hhd
                echo "$kernel_version" >$hhd_flag_file
            else
                echo "Flag file found and kernel version not changed, skip enable hhd"
            fi
        fi
    fi
fi

# 为 atd 创建目录
mkdir -p /var/spool/atd

# frzr-unlock
if [ -x "$(command -v frzr-unlock)" ]; then
    frzr-unlock
fi

# /var/lib/boltd/version
if [[ -z "$(cat /var/lib/boltd/version 2>/dev/null)" ]]; then
    echo "1" >/var/lib/boltd/version
fi

# asusctl
shortcut_path="/usr/share/applications/rog-control-center.desktop"
no_display="false"
if [[ "$VENDOR" != "ASUSTeK COMPUTER INC." ]]; then
    no_display="true"
fi

if [[ -f "$shortcut_path" ]]; then
    if grep -q "NoDisplay=" "$shortcut_path"; then
        sed -i "s/NoDisplay=.*/NoDisplay=$no_display/" "$shortcut_path"
    else
        echo "NoDisplay=$no_display" >>"$shortcut_path"
    fi
fi

# WAYDROID FIX
if [[ -f "/var/lib/waydroid/lxc/waydroid/config" ]]; then
    # echo "Removing unneeded apparmor entry from Waydroid LXC"
    # sed -i '/lxc\.apparmor\.profile\s*=\s*unconfined/d' "/var/lib/waydroid/lxc/waydroid/config"
    if grep -q "lxc.apparmor.profile" "/var/lib/waydroid/lxc/waydroid/config"; then
        echo "Removing unneeded apparmor entry from Waydroid LXC"
        sed -i '/lxc\.apparmor\.profile\s*=\s*unconfined/d' "/var/lib/waydroid/lxc/waydroid/config"
    fi
fi

# set hibernatemode
sleep_conf_dir="/etc/systemd/sleep.conf.d"
hibernatemode_config="${sleep_conf_dir}/hibernatemode.conf"
config=$(cat $hibernatemode_config | grep "HibernateMode")
if [[ ! -f "$hibernatemode_config" || -z $config ]]; then
    mkdir -p "$sleep_conf_dir"
    echo "[Sleep]" >"$hibernatemode_config"
    echo "HibernateMode=shutdown" >>"$hibernatemode_config"
fi

# setup aw87xxx
if [ -x "/usr/libexec/aw87xxx-setup" ]; then
    /usr/libexec/aw87xxx-setup
fi

# fstab
DEPLOYMENT=$(frzr-release)
fstab_path="/frzr_root/etc/fstab"
deplayment_fstab_path="/frzr_root/deployments/${DEPLOYMENT}/etc/fstab"
# 如果内容相同 删除 fstab_path
if [[ -f "$fstab_path" && -f "$deplayment_fstab_path" ]]; then
    if echo $(cat $deplayment_fstab_path 2>/dev/null) | grep -q "$(cat $fstab_path 2>/dev/null)"; then
        rm -f "$fstab_path"
    fi
fi

function device_quirks() {
    PYTHON_SITE_PACKAGES_PATH=$(python3 -c "import site; print(site.getsitepackages()[0])")
    HHD_PATH="${PYTHON_SITE_PACKAGES_PATH}/hhd"
    HHD_ORANGE_INIT_PATH="${HHD_PATH}/device/orange_pi/__init__.py"
    # OrangePi NEO and HHD_ORANGE_INIT_FILE not contain "get_touchpad_config"
    if [[ "$PRODUCT" == "NEO-01" && -f "$HHD_ORANGE_INIT_PATH" ]]; then
        if ! grep -q "get_touchpad_config" "$HHD_ORANGE_INIT_PATH"; then
            PATCH_URL="https://gitee.com/honjow/sk-chos-scripts/raw/master/patchs/hhd-orangepi-neo-touchpad.patch"
            echo "Appay HHD patch for OrangePi NEO"
            curl -sSL $PATCH_URL | patch -d $HHD_PATH -p1
            echo "Patch applied"

            status=$(systemctl is-enabled hhd@gamer 2>/dev/null)
            if [[ "$status" == "enabled" ]]; then
                echo "Restart hhd@gamer"
                systemctl restart hhd@gamer
            fi
        fi
    fi

}

device_quirks &
