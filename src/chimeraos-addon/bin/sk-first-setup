#!/bin/bash
# shellcheck disable=SC2076

set -e

# cant run this script as root
if [ "$EUID" -eq 0 ]; then
    echo "Please run this script as a normal user, not root."
    exit 1
fi

ACTION=$1

cpu_id=$(grep "model name" /proc/cpuinfo | head -1 | awk -F ': ' '{print $2}' | xargs)
cpu_keywords=(
    "Intel(R) Core(TM)"
    "AMD Ryzen"
    "AMD Athlon Silver"
    "AMD Custom APU"
)

function power_control_support() {
    local cpu
    for cpu in "${cpu_keywords[@]}"; do
        echo ">>> [${cpu_id}] [${cpu}"]
        if [[ "$cpu_id" == *"$cpu"* ]]; then
            echo ">>> [${cpu_id}] [${cpu}] match"
            return 0
        fi
    done

    return 1
}

function kernel_options_manager() {
    local scripts_path="/usr/share/device-quirks/scripts/kernel-options-manager"
    if [[ -x "$scripts_path" ]]; then
        sudo "$scripts_path" "$@"
    else
        echo "Error: script $scripts_path not found" >&2
        exit 1
    fi
}

pre_path=/usr/local/share/sk-pre

decky_path=$pre_path/decky
decky_file=$decky_path/PluginLoader
decky_version_file=$decky_path/.loader.version
decky_plugin_path=$pre_path/decky-plugins
css_path=$pre_path/css
css_hhd_path=$pre_path/css-hhd
rime_config_path=$pre_path/rime_config

USER_DIR=$HOME
HOMEBREW_FOLDER="${USER_DIR}/homebrew"
THEME_FOLDER="${HOMEBREW_FOLDER}/themes"

PRODUCT=$(cat /sys/devices/virtual/dmi/id/product_name)
VENDOR=$(cat /sys/devices/virtual/dmi/id/sys_vendor)

LED_PATH="/sys/class/leds/multicolor:chassis/"
LED_MATCH_LIST=(
    "AYANEO 2"
    "GEEK"
    "AIR"
    "SLIDE"
    "ROG Ally RC71L"
    "ROG Ally X"
)

LED_VENDOR_LIST="ONE-NETBOOK:ONE-NETBOOK TECHNOLOGY CO., LTD.:AOKZOE"

AYA_MATCH_LIST=(
    "AYA NEO FOUNDER"
    "AYA NEO 2021"
    "AYANEO 2021"
    "NEXT"
    "AYANEO 2"
    "GEEK"
    "AIR"
    "SLIDE"
    "FLIP"
)

LGO_MATCH_LIST=(
    "83E1"
    "83L3"
    "83N6"
    "83Q2"
    "83Q3"
)

GPD_MATCH_LIST=(
    "G1618-"
    "G1617-"
    "G1619-"
)

ROG_MATCH_LIST=(
    "ROG Ally RC71L"
    "ROG Ally X"
)

AOKZOE_MATCH_LIST=(
    "AOKZOE A1"
    "AOKZOE A2"
)

ONEXPLAYER_MATCH_LIST=(
    "ONEXPLAYER Mini"
    "ONEXPLAYER mini"
    "ONEXPLAYER F1"
    "ONEXPLAYER 2"
)

LOKI_MATCH_LIST=(
    "Loki Max"
    "Loki MiniPro"
    "Loki Zero"
)

ORANGEPI_MATCH_LIST=(
    "NEO-01"
    "G1621-02"
)

MSI_MATCH_LIST=(
    "Claw A1M"
    "Claw 8"
    "Claw 7"
)

HHD_MATCH_LIST=(
    "${LGO_MATCH_LIST[@]}"
    "${ROG_MATCH_LIST[@]}"
    "${GPD_MATCH_LIST[@]}"
    "${AYA_MATCH_LIST[@]}"
    "${AOKZOE_MATCH_LIST[@]}"
    "${ONEXPLAYER_MATCH_LIST[@]}"
    "${LOKI_MATCH_LIST[@]}"
    "${ORANGEPI_MATCH_LIST[@]}"
    "${MSI_MATCH_LIST[@]}"
)

function hhd_support() {
    local item
    # if [[ "$PRODUCT" =~ "ROG Ally X RC72L" ]] && [[ "$(uname -r)" =~ -sk[1-9]-chimeraos-[1-9] ]]; then
    #     # 如果内核名称包含 -skX-chimeraos-X ，启用 InputPlumber, 禁用 hhd
    #     return 1
    # fi

    for item in "${HHD_MATCH_LIST[@]}"; do
        if [[ "$PRODUCT" =~ "$item" ]]; then
            return 0
        fi
    done

    return 1
}

function led_support() {
    local product_name
    local item
    if [[ ":${LED_VENDOR_LIST}:" =~ ":${VENDOR}:" ]]; then
        return 0
    fi

    if [[ -d "${LED_PATH}" ]]; then
        return 0
    fi

    for item in "${LED_MATCH_LIST[@]}"; do
        if [[ "$PRODUCT" =~ "$item" ]]; then
            return 0
        fi
    done

    for product_name in "${MSI_MATCH_LIST[@]}"; do
        if [[ "$PRODUCT" =~ "$product_name" ]]; then
            return 0
        fi
    done

    return 1
}

function gpd_wincontrol_support() {
    local item
    for item in "${GPD_MATCH_LIST[@]}"; do
        if [[ "$PRODUCT" =~ "$item" ]]; then
            return 0
        fi
    done

    return 1
}

function LegionGoRemapper_support() {
    local item
    for item in "${LGO_MATCH_LIST[@]}"; do
        if [[ "$PRODUCT" =~ "$item" ]]; then
            return 0
        fi
    done

    return 1
}

function check_decky_enabled() {
    local service_name="plugin_loader"
    local is_enabled
    is_enabled=$(systemctl is-enabled $service_name 2>/dev/null)
    if [[ "$is_enabled" == "enabled" ]]; then
        return 0
    fi
    return 1
}

function install_decky() {
    # only install decky if plugin_loader is enabled
    if ! check_decky_enabled; then
        echo "Decky is not enabled, skipping..."
        return
    fi

    # install decky from local
    if [[ -f $decky_file ]]; then
        echo "Installing decky..."
        if [[ -d "${HOMEBREW_FOLDER}/services" ]]; then
            sudo rm -rf "${HOMEBREW_FOLDER}/services"
        fi

        mkdir -p "${HOMEBREW_FOLDER}/services"
        mkdir -p "${HOMEBREW_FOLDER}/plugins"
        mkdir -p "${HOMEBREW_FOLDER}/themes"
        mkdir -p "${USER_DIR}/.local/share/Steam/"
        touch "${USER_DIR}/.local/share/Steam/.cef-enable-remote-debugging"
        [ -d "${USER_DIR}/.var/app/com.valvesoftware.Steam/data/Steam/" ] && touch "${USER_DIR}/.var/app/com.valvesoftware.Steam/data/Steam/.cef-enable-remote-debugging"

        sudo cp $decky_file "${HOMEBREW_FOLDER}/services/PluginLoader"
        sudo cp $decky_version_file "${HOMEBREW_FOLDER}/services/.loader.version"

        sudo chmod +x "${HOMEBREW_FOLDER}/services/PluginLoader"

        mkdir -p "${HOMEBREW_FOLDER}/services/.systemd"
        cat >"${HOMEBREW_FOLDER}/services/.systemd/plugin_loader.service" <<-EOM
[Unit]
Description=SteamDeck Plugin Loader
After=network-online.target
Wants=network-online.target
[Service]
Type=simple
User=root
Restart=always
ExecStart=${HOMEBREW_FOLDER}/services/PluginLoader
WorkingDirectory=${HOMEBREW_FOLDER}/services
KillSignal=SIGKILL
Environment=PLUGIN_PATH=${HOMEBREW_FOLDER}/plugins
Environment=UNPRIVILEGED_PATH=${HOMEBREW_FOLDER}
Environment=PRIVILEGED_PATH=${HOMEBREW_FOLDER}
Environment=LOG_LEVEL=INFO
[Install]
WantedBy=multi-user.target
EOM
        sudo cp "${HOMEBREW_FOLDER}/services/.systemd/plugin_loader.service" "/etc/systemd/system/plugin_loader.service"

        # sudo systemctl daemon-reload
        # sudo systemctl enable plugin_loader
    fi
}

function compare_version() {
    local version_a=$1
    local version_b=$2
    local version_a_arr=()
    local version_b_arr=()
    IFS='.' read -ra version_a_arr <<<"$version_a"
    IFS='.' read -ra version_b_arr <<<"$version_b"

    # echo ">>> Compare version: ${version_a} and ${version_b}" >&2

    for i in {0..2}; do
        if [[ ${version_b_arr[i]} == "" ]]; then
            version_b_arr[i]=0
        fi
        if [[ ${version_a_arr[i]} == "" ]]; then
            version_a_arr[i]=0
        fi
        # echo ">>> ${i} ${version_a_arr[$i]} ${version_b_arr[$i]}" >&2
        if [[ ${version_a_arr[$i]} -gt ${version_b_arr[$i]} ]]; then
            # echo ">> ${version_a_arr[$i]} > ${version_b_arr[$i]}" >&2
            echo "1"
            return
        elif [[ ${version_a_arr[$i]} -lt ${version_b_arr[$i]} ]]; then
            # echo ">> ${version_a_arr[$i]} < ${version_b_arr[$i]}" >&2
            echo "-1"
            return
        fi
    done
    echo "0"
}

function copy_plugin() {
    local plugin_name=$1

    if [[ ! -d "${HOMEBREW_FOLDER}/plugins" ]]; then
        mkdir -p "${HOMEBREW_FOLDER}/plugins"
    fi

    case $plugin_name in
    "PowerControl")
        if power_control_support 2>/dev/null; then
            echo "Copying PowerControl plugin..."
            cp -rf "$decky_plugin_path/$plugin_name" "${HOMEBREW_FOLDER}/plugins"
        else
            echo "PowerControl plugin not supported"
        fi
        ;;
    "HueSync")
        echo "HueSync plugin: ${plugin_name}"
        if led_support 2>/dev/null; then
            echo "Copying HueSync plugin... ${plugin_name}"
            cp -rf "$decky_plugin_path/$plugin_name" "${HOMEBREW_FOLDER}/plugins"
        fi
        ;;
    "GPD-WinControl")
        if gpd_wincontrol_support 2>/dev/null; then
            echo "Copying GPD-WinControl plugin..."
            cp -rf "$decky_plugin_path/$plugin_name" "${HOMEBREW_FOLDER}/plugins"
        fi
        ;;
    "LegionGoRemapper")
        if LegionGoRemapper_support 2>/dev/null; then
            echo "Copying LegionGoRemapper plugin..."
            cp -rf "$decky_plugin_path/$plugin_name" "${HOMEBREW_FOLDER}/plugins"
        fi
        ;;
    *)
        echo "Copying $plugin_name plugin..."
        cp -rf "$decky_plugin_path/$plugin_name" "${HOMEBREW_FOLDER}/plugins"
        ;;
    esac
}

function install_decky_plugins() {

    if [[ -d $decky_plugin_path ]]; then
        echo "Installing decky plugins..."
        sudo chmod -R +w "$HOMEBREW_FOLDER"

        # cp -rf $decky_plugin_path/* "${HOMEBREW_FOLDER}/plugins"
        for plugin in "$decky_plugin_path"/*; do
            plugin_name=$(basename "$plugin")
            if [[ -d "${HOMEBREW_FOLDER}/plugins/$plugin_name" ]]; then
                if [[ -f "${HOMEBREW_FOLDER}/plugins/$plugin_name/package.json" ]]; then

                    # check version, if new version larger than current version, update
                    # 只保留 - 之前的版本号
                    current_version=$(jq -r '.version' <"${HOMEBREW_FOLDER}/plugins/$plugin_name/package.json" | awk -F '-' '{print $1}')
                    new_version=$(jq -r '.version' <"$decky_plugin_path/$plugin_name/package.json")

                    # compare version
                    compare_result=$(compare_version "$current_version" "$new_version")
                    if [[ "$compare_result" == "-1" ]]; then
                        echo "Updating $plugin_name plugin, current version: $current_version, new version: $new_version"
                        copy_plugin "$plugin_name"
                    fi
                else
                    copy_plugin "$plugin_name"
                fi
            else
                copy_plugin "$plugin_name"
            fi
        done
    fi

}

function setup_gamepad() {
    if hhd_support 2>/dev/null; then
        echo "disabling handycon/inputplumber and enabling hhd@${USER}..."
        sudo systemctl disable --now handycon || true
        sudo systemctl mask handycon || true
        sudo systemctl disable --now inputplumber || true
        sudo systemctl mask inputplumber || true
        sudo systemctl disable --now steam-powerbuttond || true

        sudo systemctl unmask "hhd@${USER}" || true
        sudo systemctl enable --now "hhd@${USER}"
    fi
}

function set_ps5_theme_default() {
    local PROFILE=$1
    if [[ -d "${THEME_FOLDER}/SBP-PS5-to-Handheld" ]]; then
        echo '{"active": true, "Replace PS glyphs": "'$PROFILE'"}' > \
            "${THEME_FOLDER}/SBP-PS5-to-Handheld/config_USER.json"
    fi
    if [[ -d "${THEME_FOLDER}/handheld-controller-glyphs-sk" ]]; then
        if [ ! -f "${THEME_FOLDER}/handheld-controller-glyphs-sk/config_USER.json" ]; then
            echo '{"active": true, "Handheld": "'$PROFILE'", "Swap View/Menu with Guide/QAM": "No"}' > \
                "${THEME_FOLDER}/handheld-controller-glyphs-sk/config_USER.json"
        else
            enable_swap_view_menu_with_guide_qam=$(jq -r '.Swap View/Menu with Guide/QAM' <"${THEME_FOLDER}/handheld-controller-glyphs-sk/config_USER.json" 2>/dev/null || echo "No")
            echo '{"active": true, "Handheld": "'$PROFILE'", "Swap View/Menu with Guide/QAM": "'$enable_swap_view_menu_with_guide_qam'"}' > \
                "${THEME_FOLDER}/handheld-controller-glyphs-sk/config_USER.json"
        fi
    fi
}

AYANEO_AIR_LIST="AIR:AIR Pro:AIR Plus:AIR 1S:AIR 1S Limited"
AYANEO_NEXT_LIST="NEXT Advance:NEXT Lite:NEXT Pro:NEXT"
AYANEO_NEO_LIST="AYA NEO FOUNDER:AYA NEO 2021:AYANEO 2021:AYANEO 2021 Pro:AYANEO 2021 Pro Retro Power"

function install_css_theme() {
    if [[ -d $css_hhd_path ]]; then
        echo "Installing hhd themes..."
        if [ -d "${css_hhd_path}/SBP-PS5-to-Handheld" ]; then
            cp -rf "${css_hhd_path}/SBP-PS5-to-Handheld" "${THEME_FOLDER}"
        fi
        if [[ "$PRODUCT" =~ "ROG Ally" ]]; then
            set_ps5_theme_default "ROG Ally"
        elif [[ "$PRODUCT" == "G1617-01" ]]; then
            # GPD Win Mini
            set_ps5_theme_default "GPD Win Mini"
        elif [[ "$PRODUCT" == "G1618-04" ]]; then
            # GPD Win4
            set_ps5_theme_default "GPD Win4"
        elif [[ "$PRODUCT" == "G1618-03" ]]; then
            # GPD Win3
            set_ps5_theme_default "GPD Win3"
        elif [[ "$PRODUCT" == "83E1" ]]; then
            set_ps5_theme_default "Legion Go"
        elif [[ ":$AYANEO_AIR_LIST:" =~ ":$PRODUCT:" ]]; then
            set_ps5_theme_default "AYANEO AIR"
        elif [[ "$VENDOR" == "AYANEO" ]]; then
            set_ps5_theme_default "AYANEO"
        elif [[ "$VENDOR" == "GPD" ]]; then
            set_ps5_theme_default "GPD"
        elif [[ "$VENDOR" == "AOKZOE" || "$VENDOR" == "ONE-NETBOOK" ]]; then
            set_ps5_theme_default "Aokzoe/OneXPlayer"
        fi
    fi
}

function install_css_theme_new() {
    if [[ -d $css_hhd_path ]]; then
        echo "Installing hhd themes (new)..."
        if [ -d "${css_hhd_path}/handheld-controller-glyphs-sk" ]; then
            cp -rf "${css_hhd_path}/handheld-controller-glyphs-sk" "${THEME_FOLDER}"
            rm -rf "${THEME_FOLDER}/SBP-PS5-to-Handheld" || true
        fi
        # Anbernic
        if [[ "$PRODUCT" == "Win600" ]]; then
            set_ps5_theme_default "Anbernic Win600"
        # AOKZOE
        elif [[ "$PRODUCT" =~ "AOKZOE A1" ]]; then
            set_ps5_theme_default "AOKZOE A1"
        # ROG Ally
        elif [[ "$PRODUCT" =~ "ROG Ally" ]]; then
            set_ps5_theme_default "ASUS ROG Ally"
        # AYANEO
        elif [[ ":$AYANEO_AIR_LIST:" =~ ":$PRODUCT:" ]]; then
            set_ps5_theme_default "AYANEO Air"
        elif [[ "$PRODUCT" =~ "AYANEO 2" || "$PRODUCT" =~ "GEEK" ]]; then
            set_ps5_theme_default "AYANEO 2"
        elif [[ "$PRODUCT" =~ "KUN" ]]; then
            set_ps5_theme_default "AYANEO Kun"
        elif [[ ":$AYANEO_NEO_LIST:" =~ ":$PRODUCT:" ]]; then
            set_ps5_theme_default "AYANEO Neo"
        elif [[ ":$AYANEO_NEXT_LIST:" =~ ":$PRODUCT:" ]]; then
            set_ps5_theme_default "AYANEO Next"
        elif [[ "$PRODUCT" == "SLIDE" ]]; then
            set_ps5_theme_default "AYANEO Slide"
        # AYN
        elif [[ "$PRODUCT" =~ "Loki" ]]; then
            set_ps5_theme_default "AYN Loki"
        # GPD
        elif [[ "$PRODUCT" == "G1618-03" ]]; then
            set_ps5_theme_default "GPD Win 3"
        elif [[ "$PRODUCT" == "G1618-04" ]]; then
            set_ps5_theme_default "GPD Win 4"
        elif [[ "$PRODUCT" == "G1617-01" || "$PRODUCT" == "G1617-02" ]]; then
            set_ps5_theme_default "GPD Win Mini"
        elif [[ "$PRODUCT" == "G1619-05" || "$PRODUCT" == "G1619-04" ]]; then
            set_ps5_theme_default "GPD Win Max 2"
        # Lenovo
        elif [[ "$PRODUCT" == "83E1" ]]; then
            set_ps5_theme_default "Lenovo Legion Go"
        elif [[ "$PRODUCT" == "83L3" || "$PRODUCT" == "83N6" || "$PRODUCT" == "83Q2" || "$PRODUCT" == "83Q3" ]]; then
            set_ps5_theme_default "Lenovo Legion Go S"
        # MSI
        elif [[ "$PRODUCT" == "Claw A1M" || "$PRODUCT" == "Claw 7 AI+ A2VM" ]]; then
            set_ps5_theme_default "MSI Claw"
        # ONEXPLAYER
        elif [[ "$PRODUCT" =~ "ONEXFLY X1" ]]; then
            set_ps5_theme_default "ONEXFLY X1"
        elif [[ "$PRODUCT" =~ "ONEXFLY 2" ]]; then
            set_ps5_theme_default "ONEXFLY 2"
        elif [[ "$PRODUCT" =~ "ONEXFLY F1" ]]; then
            set_ps5_theme_default "ONEXFLY F1"
        # TECNO
        elif [[ "$PRODUCT" == "Pocket Go" ]]; then
            set_ps5_theme_default "TECNO Pocket Go"
        # Zotac
        elif [[ "$PRODUCT" == "ZOTAC GAMING ZONE" ]]; then
            set_ps5_theme_default "Zotac Zone"
        fi
    fi
}

function device_quirks() {
    # turn off usb wakeup
    if [[ "$VENDOR" == "AYANEO" && "$VENDOR" == "GPD" ]]; then
        echo "Disabling USB wakeup..."
        config_path="/etc/device-quirks/device-quirks.conf"
        enable_str="USB_WAKE_ENABLED=1"
        disable_str="USB_WAKE_ENABLED=0"
        if [[ -f $config_path ]]; then
            sudo sed -i "s/$enable_str/$disable_str/g" $config_path
        fi
    fi
    sudo frzr-tweaks
}

function restart_plugin_loader() {
    echo "restarting plugin_loader..."
    sudo systemctl restart plugin_loader
}

function flatpak_auto_repo() {
    echo "Auto set flathub repo..."
    if [ -x "$(command -v cjust)" ]; then
        cjust flatpak-auto-repo || true
    fi
}

function user_setup_after_update() {
    local script_dir="$HOME/.config/sk-chos-tool/update"
    if [[ ! -d "$script_dir" ]]; then
        mkdir -p "$script_dir"
    fi
    for script in "$script_dir"/*; do
        if [[ -x "$script" ]]; then
            echo "Running $(basename "$script")..."
            exec "$script" || true
        fi
    done
}

function copy_rime_config() {
    local ibus_config_path
    local dst_dir
    if [[ -d "${rime_config_path}" ]]; then
        ibus_config_path="${USER_DIR}/.config/ibus"
        dst_dir="${ibus_config_path}/rime"

        if ! mkdir -p "${ibus_config_path}"; then
            echo "Error: Failed to create ibus config directory"
            return 1
        fi
        chown "${USER}:${USER}" "${ibus_config_path}"

        if ! mkdir -p "${dst_dir}"; then
            echo "Error: Failed to create rime config directory"
            return 1
        fi
        chown "${USER}:${USER}" "${dst_dir}"

        if [[ ! -d "${dst_dir}/.git" ]]; then
            echo "Copying rime config..."
            if ! rsync -a "${rime_config_path}/" "${dst_dir}/"; then
                echo "Error: Failed to copy rime config"
                return 1
            fi
            chown -R "${USER}:${USER}" "${dst_dir}"
        fi
    else
        echo "Warning: Rime config source directory not found at ${rime_config_path}"
        return 0
    fi
}

function recopy_skel() {
    echo "Recopy skel..."
    cp -rfv /etc/skel/. "$HOME"
}

function set_hostname() {
    local current_hostname
    local product_name
    local hostname
    current_hostname=$(hostnamectl --static)
    product_name=$(cat /sys/devices/virtual/dmi/id/product_name)
    hostname=$(echo "$product_name" | sed 's/ /-/g;s/:/-/g')
    echo "Setting hostname to $hostname..."
    sudo hostnamectl set-hostname "$hostname"
    if [[ "$current_hostname" != "$hostname" ]]; then
        sudo systemctl restart systemd-hostnamed
    fi
}

function set_kernel_options() {
    echo "Setting kernel options..."
    kernel_options_manager --append "quiet"
    kernel_options_manager --append "splash"
}

case $ACTION in
"--update")
    install_decky
    install_decky_plugins
    install_css_theme
    install_css_theme_new
    restart_plugin_loader
    device_quirks
    user_setup_after_update
    copy_rime_config
    ;;
*)
    set_kernel_options
    recopy_skel
    set_hostname
    install_decky
    install_decky_plugins
    setup_gamepad
    install_css_theme
    install_css_theme_new
    restart_plugin_loader
    device_quirks
    user_setup_after_update
    copy_rime_config
    flatpak_auto_repo
    ;;
esac
